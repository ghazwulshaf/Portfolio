@model About

@{
    Layout = "_LayoutDashboard";
    ViewData["Title"] = "About";
}

<div id="dashboard-about" class="relative sm:w-full px-2 sm:px-4 lg:px-12 pt-2 sm:pt-4 pb-6 *:mt-4 [&_.note-editor]:text-sm [&_.note-editor]:sm:text-base">

    <!-- PROFILE -->
    <section id="about-profile" class="first:mt-1">
        <div class="section-title flex items-center gap-2 *:grow-0">
            <h6>Profile</h6>
            <button id="profile-form-edit" class="inline" onclick="EditForm(this, 'profile-form')"><i data-feather="edit-3" class="h-4"></i></button>
        </div>
        
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="text-blue-500">@TempData["SuccessMessage"]</div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="text-red-500">@TempData["ErrorMessage"]</div>
        }

        <div class="card p-2 sm:p-4 mt-2">
            
            <form id="profile-form" method="post" enctype="multipart/form-data" asp-action="Update" asp-controller="DashboardAbout" data-editable="false" class="*:mt-4">
                <div class="first:mt-0">
                    <label asp-for='Profile.Title' class="label">Title:</label>
                    <input type="text" asp-for='Profile.Title' class="input">
                </div>

                <div class="[&_ul]:list-inside [&_ul]:list-disc [&_ol]:list-inside [&_ol]:list-decimal">
                    <label asp-for='Profile.Description' class="label">Description:</label>
                    <textarea asp-for='Profile.Description' id="summernote"></textarea>
                </div>

                <div>
                    <label asp-for='Profile.Photo' class="label">Photo:</label>
                    <div class="input">
                        <input type="hidden" asp-for='Profile.Photo'>
                        <input type="file" id="profile-photo-input" name="ProfilePhotoFile" accept="image/*">
                        <img id="profile-photo" src='@Model.Profile.Photo' class="w-48 mt-2">
                    </div>
                </div>

                <div>
                    <label asp-for="Profile.CV" class="label">CV:</label>
                    <div class="input">
                        <input type="hidden" asp-for="Profile.CV">
                        <input type="file" name="ProfileCVFile" id="profile-cv-input" accept="pdf/*">
                    @if (Model.Profile.CV != null && Model.Profile.CV != "")
                    {
                        <a href="@Url.Action("DownloadFile", "File", new { fileName = Model.Profile.CV })" class="flex items-start gap-2 mt-2">
                            <img src="/images/pdf.png" alt="Download CV" class="h-12">
                            <div>@Model.Profile.CV</div>
                        </a>
                    }
                    </div>
                </div>

                <div id="profile-form-actions" class="hidden justify-center gap-4 last:mt-8 mb-4">
                    <button type="submit" form="profile-form" class="button button-dark py-1">Save</button>
                    <button type="button" class="button button-light py-1" onclick="CloseForm()">Cancel</button>
                </div>
            </form>
        </div>
    </section>

    <div class="w-full flex justify-end border border-t-black">
        <button class="text-blue-500" onclick="AddSection()">Add Section</button>
    </div>

    @foreach (var Section in Model.Sections)
    {
    @await Html.PartialAsync("/Views/Admin/Dashboard/About/Section.cshtml", Section)
    }
</div>

@section Scripts
{
    <script>
        // set data-editable global attribute on forms
        var forms = document.querySelectorAll('[data-editable]');
        forms.forEach((form) => {
            SetEditable(form, form.dataset.editable);
        })

        // show profile photo dynamically
        const profilePhoto = document.querySelector("#profile-photo");
        const profilePhotoInput = document.querySelector("#profile-photo-input");

        profilePhotoInput.addEventListener("change", (event) => {
            const file = event.target.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    profilePhoto.src = e.target.result;
                }

                reader.readAsDataURL(file);
            }
        })

        // function for set form editable
        function EditForm(button, formId) {
            var formActionsId = formId + '-actions';

            // set form editable attribute
            const form = document.querySelector("#" + formId);
            form.dataset.editable = "true";
            SetEditable(form, form.dataset.editable)

            // hide edit button
            button.classList.replace("inline", "hidden");

            // show actions button
            const actionsWrapper = document.querySelector("#" + formActionsId)
            actionsWrapper.classList.replace("hidden", "flex");
        }

        // function for set all inputs in form to readonly or disable
        function SetEditable(form, editable) {
            if (editable == "true") {
                $(form).find('input').prop('disabled', false);
                $(form).find('select').prop('disabled', false);
                $(form).find('button').prop('disabled', false);
                $(form).find('button').removeClass('disabled');
                $(form).find('#summernote').summernote('enable');
            }
            else {
                $(form).find('input').prop('disabled', true);
                $(form).find('select').prop('disabled', true);
                $(form).find('button').prop('disabled', true);
                $(form).find('button').addClass('disabled');
                $(form).find('#summernote').summernote('disable');
            }
        }

        // function for close form editing
        function CloseForm() {
            if (confirm('Are you sure you want to cancel form editing?'))
                location.reload();
        }

        // function to confirm delete section or item
        function Delete(event, component) {
            var userConfirmed = confirm('Are you sure you want to delete this ' + component);
            if (!userConfirmed) {
                event.preventDefault();
            }
            return userConfirmed;
        }
    </script>

    <script>
        function AddSection() {
            $.ajax({
                url: '@Url.Action("AddSection", "DashboardAbout")',
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }

        function EditSection(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }

        function GetSectionItem(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }
    </script>

    <script>
        function Reorder(sectionId, itemCount) {
            // show actions button
            const actions = document.querySelector('#' + sectionId + '-reorder-actions');
            actions.classList.replace('hidden', 'inline');

            // show items order button
            const sectionElement = document.querySelector('#' + sectionId);
            const itemsOrderButton = sectionElement.querySelectorAll('.btn-order');
            itemsOrderButton.forEach((item) => {
                item.classList.remove('hidden');
            });

            CheckOrder(sectionId, itemCount);
        }

        function CancelReorder() {
            if (confirm('Are you sure you want to cancel section reordering items?'))
                location.reload();
        }

        function CheckOrder(parentId, itemCount) {
            var parent = document.querySelector('#' + parentId);

            var firstItem = parent.querySelector('.section-item[style="order: 0;"]');
            var firstItemBtn = firstItem.querySelector('.btn-order-up');
            $(firstItemBtn).addClass('disable');
            $(firstItemBtn).prop('disables', 'true');

            var lastItem = parent.querySelector(`.section-item[style="order: ${itemCount-1};"]`);
            var lastItemBtn = lastItem.querySelector('.btn-order-down');
            $(lastItemBtn).addClass('disable');
            $(lastItemBtn).prop('disabled', 'true');
        }

        function OrderUp(elementId, itemCount) {
            var orderNumber = $('#' + elementId).css('order');
            var beforeNumber = Number(orderNumber) - Number(1);

            var item = document.querySelector('#' + elementId);
            var itemBefore = $(item).siblings(`[style="order: ${beforeNumber};"]`);
            itemBefore = itemBefore[0];

            $(itemBefore).css('order', orderNumber);
            $(itemBefore).children('.item-input-order').val(orderNumber);
            $(item).css('order', beforeNumber);
            $(item).children('.item-input-order').val(beforeNumber);

            var btnOrderUp = item.querySelector('.btn-order-up');
            var btnOrderDown = item.querySelector('.btn-order-down');
            var btnOrderUpBefore = itemBefore.querySelector('.btn-order-up');
            var btnOrderDownBefore = itemBefore.querySelector('.btn-order-down');

            if (beforeNumber == 0) {
                $(btnOrderUp).addClass('disable');
                $(btnOrderUp).prop('disabled', 'true');
                $(btnOrderUpBefore).removeClass('disable');
                $(btnOrderUpBefore).removeAttr('disabled');
            }

            if (orderNumber == itemCount - 1) {
                $(btnOrderDown).removeClass('disable');
                $(btnOrderDown).removeAttr('disabled');
                $(btnOrderDownBefore).addClass('disable');
                $(btnOrderDownBefore).prop('disabled', 'true');
            }
        }

        function OrderDown(elementId, itemCount) {
            var orderNumber = $('#' + elementId).css('order');
            var nextNumber = Number(orderNumber) + Number(1);

            var item = document.querySelector('#' + elementId);
            var itemNext = $(item).siblings(`[style="order: ${nextNumber};"]`);
            itemNext = itemNext[0];

            $(itemNext).css('order', orderNumber);
            $(itemNext).children('.item-input-order').val(orderNumber);
            $(item).css('order', nextNumber);
            $(item).children('.item-input-order').val(nextNumber);

            var btnOrderUp = item.querySelector('.btn-order-up');
            var btnOrderDown = item.querySelector('.btn-order-down');
            var btnOrderUpNext = itemNext.querySelector('.btn-order-up');
            var btnOrderDownNext = itemNext.querySelector('.btn-order-down');

            if (orderNumber == 0) {
                $(btnOrderUp).removeClass('disable');
                $(btnOrderUp).removeAttr('disabled');
                $(btnOrderUpNext).addClass('disable');
                $(btnOrderUpNext).prop('disabled', 'true');
            }

            if (nextNumber == itemCount - 1) {
                $(btnOrderDown).addClass('disable');
                $(btnOrderDown).prop('disabled', 'true');
                $(btnOrderDownNext).removeClass('disable');
                $(btnOrderDownNext).removeAttr('disabled');
            }
        }
    </script>
}