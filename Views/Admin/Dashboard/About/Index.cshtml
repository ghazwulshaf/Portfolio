@model About

@{
    Layout = "_LayoutDashboard";
    ViewData["Title"] = "About";
}

<div id="dashboard-about" class="relative">

    <div class="px-12 py-4 *:mt-4">

        <!-- PROFILE -->
        <section id="about-profile" class="first:mt-0">
            <div class="section-title flex items-center gap-2 *:grow-0">
                <h6>Profile</h6>
                <button id="profile-form-edit" class="inline" onclick="EditForm(this, 'profile-form')"><i data-feather="edit-3" class="h-4"></i></button>
            </div>
            
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="text-blue-500">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="text-red-500">@TempData["ErrorMessage"]</div>
            }

            <div class="card mt-2">
                
                <form id="profile-form" method="post" enctype="multipart/form-data" asp-action="Update" asp-controller="DashboardAbout" data-editable="false" class="*:mt-4">
                    <div class="first:mt-0">
                        <label asp-for='Profile.Data["Title"]' class="label">Title:</label>
                        <input type="text" asp-for='Profile.Data["Title"]' class="input">
                    </div>

                    <div>
                        <label asp-for='Profile.Data["Description"]' class="label">Description:</label>
                        <textarea asp-for='Profile.Data["Description"]' id="summernote"></textarea>
                    </div>

                    <div>
                        <label asp-for='ProfilePhoto.File' class="label">Photo:</label>
                        <div class="input">
                            <input type="hidden" asp-for='Profile.Data["Photo"]'>       @* input hidden untuk menyimpan value photo old jika tidak terdapat perubahan photo *@
                            <input type="file" id="profile-photo-input" asp-for='ProfilePhoto.File' accept="image/*">
                            <img id="profile-photo" src='@Model.Profile.Data["Photo"]' class="w-48 mt-2">
                        </div>
                    </div>

                    <div id="profile-form-actions" class="hidden justify-center gap-4 last:mt-8 mb-4">
                        <button type="submit" form="profile-form" class="button button-dark py-1">Save</button>
                        <button type="button" class="button button-light py-1" onclick="CloseForm()">Cancel</button>
                    </div>
                </form>
            </div>
        </section>

        @foreach (var Section in Model.Sections)
        {
        <form id="section_@Section.Id" method="post" asp-action="DeleteSection" asp-controller="DashboardAbout" asp-route-id="@Section.Id" onsubmit="return Delete(event, 'section')" hidden></form>
        
        <section>
            <div class="section-title flex items-center gap-2">
                <h6>@Section.Title</h6>
                <div class="flex items-center">
                    <button onclick="EditSection('@Url.Action("EditSection", "DashboardAbout", new { id = Section.Id })')"><i data-feather="edit-3" class="h-4"></i></button>
                    <button type="submit" form="section_@Section.Id"><i data-feather="trash" class="h-4 text-red-500"></i></button>
                </div>
            </div>

            <div class="card mt-2">
                <div class="flex gap-2 *:grow-0">
                    <label class="label">Items:</label>
                    <div>
                        <button class="inline text-sm text-blue-500 underline" onclick="GetSectionItem('@Url.Action("AddSectionItem", "DashboardAbout", new { sectionId = Section.Id })')">add</button>
                    </div>
                </div>

                <div class="*:mt-2">
                @foreach (var Item in Section.Items)
                {
                    <form id="section_@Section.Id-item_@Item.Id" method="post" asp-action="DeleteSectionItem" asp-controller="DashboardAbout" asp-route-sectionId="@Section.Id" asp-route-itemId="@Item.Id" onsubmit="return Delete(event, 'item')" hidden></form>

                    <div class="flex items-start gap-2">
                        <div class="w-full border border-gray-200 p-4">
                            <h6 class="text-base">@Item.Name</h6>

                            @if (Item.Company != null || Item.From != null)
                            {
                            <div class="mt-1 text-sm text-gray-500">
                                <span>@Item.Company</span> <span>@(@Item.From != null ? "|" : null)</span> <span>@Item.From?.ToString("MMMM yyyy")</span> <span>@(Item.To != null ? "-" : null)</span> <span>@Item.To?.ToString("MMMM yyyy")</span>
                            </div>
                            }

                            @if (Item.Description != null)
                            {
                            <p class="mt-2">@Html.Raw(Item.Description)</p>
                            }
                        </div>

                        <div class="mt-2 grow-0 flex">
                            <button type="button" onclick="GetSectionItem('@Url.Action("EditSectionItem", "DashboardAbout", new { sectionId = Section.Id, itemId = Item.Id })')"><i data-feather="edit-3" class="h-4"></i></button>
                            <button type="submit" form="section_@Section.Id-item_@Item.Id"><i data-feather="trash" class="h-4 text-red-500"></i></button>
                        </div>
                    </div>
                }
                </div>
            </div>
        </section>

        }

        <div class="w-full mt-4 flex justify-end border border-t-black">
            <button class="text-blue-500" onclick="AddSection()">Add Section</button>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        // set data-editable global attribute on forms
        var forms = document.querySelectorAll('[data-editable]');
        forms.forEach((form) => {
            SetEditable(form, form.dataset.editable);
        })

        // show profile photo dynamically
        const profilePhoto = document.querySelector("#profile-photo");
        const profilePhotoInput = document.querySelector("#profile-photo-input");

        profilePhotoInput.addEventListener("change", (event) => {
            const file = event.target.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    profilePhoto.src = e.target.result;
                }

                reader.readAsDataURL(file);
            }
        })

        // function for set form editable
        function EditForm(button, formId) {
            var formActionsId = formId + '-actions';

            // set form editable attribute
            const form = document.querySelector("#" + formId);
            form.dataset.editable = "true";
            SetEditable(form, form.dataset.editable)

            // hide edit button
            button.classList.replace("inline", "hidden");

            // show actions button
            const actionsWrapper = document.querySelector("#" + formActionsId)
            actionsWrapper.classList.replace("hidden", "flex");
        }

        // function for set all inputs in form to readonly or disable
        function SetEditable(form, editable) {
            if (editable == "true") {
                $(form).find('input').prop('disabled', false);
                $(form).find('select').prop('disabled', false);
                $(form).find('button').prop('disabled', false);
                $(form).find('button').removeClass('disabled');
                $(form).find('#summernote').summernote('enable');
            }
            else {
                $(form).find('input').prop('disabled', true);
                $(form).find('select').prop('disabled', true);
                $(form).find('button').prop('disabled', true);
                $(form).find('button').addClass('disabled');
                $(form).find('#summernote').summernote('disable');
            }
        }

        // function for close form editing
        function CloseForm() {
            if (confirm('Are you sure you want to cancel form editing?'))
                location.reload();
        }

        // function to confirm delete section or item
        function Delete(event, component) {
            var userConfirmed = confirm('Are you sure you want to delete this ' + component);
            if (!userConfirmed) {
                event.preventDefault();
            }
            return userConfirmed;
        }
    </script>

    <script>
        function AddSection() {
            $.ajax({
                url: '@Url.Action("AddSection", "DashboardAbout")',
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }

        function EditSection(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }

        function GetSectionItem(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: (response) => {
                    $('#dashboard-about').append(response);
                }
            })
        }
    </script>
}